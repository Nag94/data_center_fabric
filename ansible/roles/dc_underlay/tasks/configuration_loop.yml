---
- name: CONFIGURATION LOOP // LOGGING THE PROVISIONING STARTED
  lineinfile:
      path: /home/aaa/github/data_center_fabric/ansible/logs/auto_deployment_by_kapacitor.log
      insertafter: EOF
      line: "{{ ansible_date_time.iso8601 }}: ansible-playbook started configuration of {{ device_item.name }} having mgmt IP {{ device_item.primary_ip4.address | ipaddr('address') }}"
  tags:
      - configure_underlay

- name: CONFIGURATION LOOP // GETING PORTS CONFIG
  uri:
      url: "http://{{ netbox_host }}:{{ netbox_port }}/api/dcim/interfaces/?device={{ device_item.name }}"
      method: GET
      return_content: yes
      headers:
          accept: "application/json"
          Authorization: "Token {{ netbox_token }}"
  register: get_device_ports
  tags:
      - configure_underlay

# Commented as should be used only for debug purposes
#- name: CONFIGURATION LOOP // READING PORT DATA
#  debug:
#      msg: "{{ get_device_ports.json }}"
#  tags:
#      - configure_underlay

- name: CONFIGURATION LOOP // GETING IP CONFIG
  uri:
      url: "http://{{ netbox_host }}:{{ netbox_port }}/api/ipam/ip-addresses/?device={{ device_item.name }}"
      method: GET
      return_content: yes
      headers:
          accept: "application/json"
          Authorization: "Token {{ netbox_token }}"
  register: get_device_ip
  tags:
      - configure_underlay

# Commented as should be used only for debug purposes
#- name: CONFIGURATION LOOP // READING IP DATA
#  debug:
#      msg: "{{ get_device_ip.json }}"
#  tags:
#      - configure_underlay

- name: CONFIGURATION LOOP // CREATING TEMPORARY FOLDER FOR {{ device_item.name }}
  file:
      dest: "{{ working_folder }}/{{ device_item.name }}"
      state: directory
  tags:
      - configure_underlay

- name: CONFIGURATION LOOP // TEMPLATING CONFIG FOR {{ device_item.name }}
  template:
      src: "{{ device_item.platform.slug }}.j2"
      dest: "{{ working_folder }}/{{ device_item.name }}/{{ device_item.name }}.conf"
  tags:
      - configure_underlay

- name: CONFIGURATION LOOP // CUMULUS // CONFIGURING {{ device_item.name }}
  include_tasks: config_cumulus.yml
  when: device_item.platform.slug == 'cumulus-linux'
  tags:
      - configure_underlay

- name: CONFIGURATION LOOP // ARISTA // CONFIGURING {{ device_item.name }}
  local_action:
      module: "eos_config"
      authorize: true
      save: true
      src: "{{ working_folder }}/{{ device_item.name }}/{{ device_item.name }}.conf"
      provider:
          host: "{{ device_item.primary_ip4.address | ipaddr('address') }}"
          username: "{{ arista.user }}"
          password: "{{ arista.pass }}"
          auth_pass: "{{ arista.pass }}"
  ignore_errors: yes
  ignore_unreachable: yes
  when: device_item.platform.slug == 'arista-eos'
  tags:
      - configure_underlay

- name: CONFIGURATION LOOP // CISCO // CONFIGURING {{ device_item.name }}
  local_action:
      module: "iosxr_config"
      src: "{{ working_folder }}/{{ device_item.name }}/{{ device_item.name }}.conf"
      provider:
          host: "{{ device_item.primary_ip4.address | ipaddr('address') }}"
          username: "{{ cisco.user }}"
          password: "{{ cisco.pass }}"
  ignore_errors: yes
  ignore_unreachable: yes
  when: device_item.platform.slug == 'cisco-ios-xr'
  tags:
      - configure_underlay

- name: CONFIGURATION LOOP // UPDATING DEVICE STATUS IN THE NETBOX
  uri:
      url: "http://{{ netbox_host }}:{{ netbox_port }}/api/dcim/devices/{{ device_item.id }}/"
      method: PATCH
      body_format: json
      body: >
          {"status": 1}
      return_content: yes
      headers:
          accept: "application/json"
          Content-Type: "application/json"
          Authorization: "Token {{ netbox_token }}"
  register: get_device_ports
  tags:
      - configure_underlay
...
