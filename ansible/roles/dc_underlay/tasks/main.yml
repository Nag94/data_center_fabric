---
- name: CREATING TEMPORARY FOLDER
  file:
      dest: "{{ working_folder }}"
      state: directory
  tags:
      - configure_underlay

- name: GETTING INFO ABOUT NETBOX CONTAINER
  shell: "sudo docker container port {{ netbox_frontend_container }}"
  become: yes
  register: netbox_frontend_container_port
  tags:
      - configure_underlay

- name: SETTING API PORT
  set_fact:
      netbox_port: "{{ netbox_frontend_container_port.stdout | regex_replace('^.*:(\\d+)$', '\\1') }}"
  tags:
      - configure_underlay

- name: GETTING LIST OF DEVICES
  uri:
      url: "http://{{ netbox_host }}:{{ netbox_port }}/api/dcim/devices/"
      method: GET
      return_content: yes
      headers:
          accept: "application/json"
          Authorization: "Token {{ netbox_token }}"
  register: get_devices
  tags:
      - configure_underlay

- name: GETTING LIST OF ALL INTERFACES
  uri:
      url: "http://{{ netbox_host }}:{{ netbox_port }}/api/dcim/interfaces/?device={{ item.name }}"
      method: GET
      return_content: yes
      headers:
          accept: "application/json"
          Authorization: "Token {{ netbox_token }}"
  register: get_all_interfaces
  loop: "{{ get_devices.json.results }}"
  tags:
      - configure_underlay

- name: GETTING LIST OF ALL IP ADDRESSES
  uri:
      url: "http://{{ netbox_host }}:{{ netbox_port }}/api/ipam/ip-addresses/?device={{ item.name }}"
      method: GET
      return_content: yes
      headers:
          accept: "application/json"
          Authorization: "Token {{ netbox_token }}"
  register: get_all_ip
  loop: "{{ get_devices.json.results }}"
  tags:
      - configure_underlay

# Commented as should be used only for debug purposes
#- name: READING LIST OF ALL IP ADDRESSES
#  debug:
#      msg: "{{ item.json.results }}"
#  loop: "{{ get_all_ip.results }}"
#  tags:
#      - configure_underlay

- name: STARTING CONFIGURATION LOOP
  include_tasks: status_check.yml
  loop: "{{ get_devices.json.results }}"
  loop_control:
      loop_var: device_item
  when: look_for_this_ip is undefined or (look_for_this_ip is defined and device_item.primary_ip4.address | ipaddr('address') == look_for_this_ip)
  tags:
      - configure_underlay
...

