---
- name: CONTAINER WITH {{ container_item }} // CREATING FOLDER 
  file:
      dest: "{{ docker.path_to_containers }}/{{ container_item }}"
      state: directory
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // CREATING STORAGE FOLDER
  file:
      dest: "{{ docker.path_to_containers }}/{{ container_item }}/data"
      state: directory
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // CREATING STORAGE FOR /VAR/LIB/GRAFANA
  file:
      dest: "{{ docker.path_to_containers }}/{{ container_item }}/data/var_lib_grafana"
      state: directory
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // CREATING STORAGE FOR /VAR/LIB/GRAFANA/DASHBOARDS
  file:
      dest: "{{ docker.path_to_containers }}/{{ container_item }}/data/var_lib_grafana/dashboards"
      state: directory
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // CREATING STORAGE FOR /ETC/GRAFANA
  file:
      dest: "{{ docker.path_to_containers }}/{{ container_item }}/data/etc_grafana"
      state: directory
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // CREATING STORAGE FOR /ETC/GRAFANA/PROVISIONING
  file:
      dest: "{{ docker.path_to_containers }}/{{ container_item }}/data/etc_grafana/provisioning"
      state: directory
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // CREATING STORAGE FOR /ETC/GRAFANA/PROVISIONING/DATASOURCES
  file:
      dest: "{{ docker.path_to_containers }}/{{ container_item }}/data/etc_grafana/provisioning/datasources"
      state: directory
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // CREATING STORAGE FOR /ETC/GRAFANA/PROVISIONING/DASHBOARDS
  file:
      dest: "{{ docker.path_to_containers }}/{{ container_item }}/data/etc_grafana/provisioning/dashboards"
      state: directory
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // GETTING IP OF INFLUXDB
  docker_container:
      name: dcf_influxdb
  become: yes
  register: dcf_influxdb_inspect
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // LAUNCHING CONTAINER
  docker_container:
      name: dcf_grafana
      image: grafana/grafana
      state: started
      user: root
      networks:
          - name: "{{ docker.private_network.name }}"
      purge_networks: yes
      ports:
           - "3000:3000"
      volumes:
           - "{{ pwd_actual }}/{{ docker.path_to_containers }}/{{ container_item }}/data/var_lib_grafana:/var/lib/grafana"
           - "{{ pwd_actual }}/{{ docker.path_to_containers }}/{{ container_item }}/data/etc_grafana/provisioning:/etc/grafana/provisioning"
      log_driver: syslog
      log_options:
          syslog-address: udp://localhost:514
          syslog-format: rfc5424
          tag: "{{ container_item }}"
  become: yes
  tags:
      - infra_enabler_install
      - infra_enabler_ops

- name: CONTAINER WITH {{ container_item }} // CREATE DATASTORE CONFIG FOR PROVISIONING
  file:
      dest: "{{ docker.path_to_containers }}/{{ container_item }}/data/etc_grafana/provisioning/datasources/datastore.yml"
      state: touch
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // TEMPLATING DATASTORES
  copy:
      content: |
          apiVersion: 1
          datasources:
              - name: InfluxDB-SNMP
                type: influxdb
                access: proxy
                database: {{ var_influxdb.db_name.snmp }} 
                user: {{ var_influxdb.username }}
                password: {{ var_influxdb.password }}
                url: https://{{ dcf_influxdb_inspect.ansible_facts.docker_container.NetworkSettings.Networks.mon_net.IPAddress }}:8086
                withCredentials: yes
                isDefault: yes
                jsonData:
                    tlsSkipVerify: yes
              - name: InfluxDB-SYSLOG
                type: influxdb
                access: proxy
                database: {{ var_influxdb.db_name.syslog }}
                user: {{ var_influxdb.username }}
                password: {{ var_influxdb.password }}
                url: https://{{ dcf_influxdb_inspect.ansible_facts.docker_container.NetworkSettings.Networks.mon_net.IPAddress }}:8086
                withCredentials: yes
                isDefault: no
                jsonData:
                    tlsSkipVerify: yes
      dest: "{{ docker.path_to_containers }}/{{ container_item }}/data/etc_grafana/provisioning/datasources/datastore.yml"
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // CREATE DASHBOARD CONFIG FOR PROVISIONING
  file:
      dest: "{{ docker.path_to_containers }}/{{ container_item }}/data/etc_grafana/provisioning/dashboards/dashboard.yml"
      state: touch
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // TEMPLATING DASHBOARDS
  copy: 
      content: |
          apiVersion: 1
          providers:
              - name: 'default'
                orgId: 1
                folder: ''
                type: file
                disableDeletion: false
                editable: true
                updateIntervalSeconds: 10
                options:
                    path: /var/lib/grafana/dashboards
      dest: "{{ docker.path_to_containers }}/{{ container_item }}/data/etc_grafana/provisioning/dashboards/dashboard.yml"
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // COPYING DASHBOARDS CONTENT
  copy:
      src: "{{ pwd_actual }}/files/infra_enabler/grafana/dashboards/"
      dest: "{{ pwd_actual }}/{{ docker.path_to_containers }}/{{ container_item }}/data/var_lib_grafana/dashboards"
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // GENERATING SSL CERTIFICATE
  shell: 'docker exec -i dcf_grafana openssl req -x509 -nodes -newkey rsa:2048 -keyout /etc/ssl/grafana-selfsigned.key -out /etc/ssl/grafana-selfsigned.crt -days 365 -subj "/C=DE/ST=NRW/L=DUS/O=karneliuk.com/CN=grafana.karneliuk.com"'
  become: yes
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // COPYING INITIAL CONFIGURATION FILE FROM GRAFANA
  shell: "docker cp dcf_grafana:/etc/grafana/grafana.ini {{ docker.path_to_containers }}/{{ container_item }}/grafana.ini"
  become: yes
  tags:
      - infra_enabler_install

#- name: CONTAINER WITH {{ container_item }} // ENABLING HTTPS
#  lineinfile:
#      dest: "{{ docker.path_to_containers }}/{{ container_item }}/grafana.ini"
#      regexp: ';protocol ='
#      line: 'protocol = https'
#  tags:
#      - infra_enabler_install

#- name: CONTAINER WITH {{ container_item }} // PROVIDING CERTIFICATE PATH
#  lineinfile:
#      dest: "{{ docker.path_to_containers }}/{{ container_item }}/grafana.ini"
#      regexp: '# https certs & key file'
#      line: 'cert_file = /etc/ssl/grafana-selfsigned.crt'
#  tags:
#      - infra_enabler_install

#- name: CONTAINER WITH {{ container_item }} // PROVIDING KEY PATH
#  lineinfile:
#      dest: "{{ docker.path_to_containers }}/{{ container_item }}/grafana.ini"
#      regexp: ';cert_key ='
#      line: 'cert_key = /etc/ssl/grafana-selfsigned.key'
#  tags:
#      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // COPYING INITIAL CONFIGURATION FILE FROM GRAFANA
  shell: "docker cp {{ docker.path_to_containers }}/{{ container_item }}/grafana.ini dcf_grafana:/etc/grafana/grafana.ini"
  become: yes
  tags:
      - infra_enabler_install

- name: CONTAINER WITH {{ container_item }} // RESTARTING CONTAINER
  docker_container:
      name: dcf_grafana
      image: grafana/grafana
      state: started
      user: root
      restart: yes
      networks:
          - name: "{{ docker.private_network.name }}"
      purge_networks: yes
      ports:
           - "3000:3000"
      volumes:
           - "{{ pwd_actual }}/{{ docker.path_to_containers }}/{{ container_item }}/data/var_lib_grafana:/var/lib/grafana"
           - "{{ pwd_actual }}/{{ docker.path_to_containers }}/{{ container_item }}/data/etc_grafana/provisioning:/etc/grafana/provisioning"
      log_driver: syslog
      log_options:
          syslog-address: udp://localhost:514
          syslog-format: rfc5424
          tag: "{{ container_item }}"
  become: yes
  tags:
      - infra_enabler_install
...
